/* Generated By:JavaCC: Do not edit this line. simplejava.java */
public class simplejava implements simplejavaConstants {

  static final public ASTProgram program() throws ParseException {
 Token t; ASTClasses classes = null; ASTClass classs; ASTFunctionDefinitions funcDefs = null; ASTFunctionDefinition funcDef;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      classs = classDef();
                                if(classes == null)
                                   classes = new ASTClasses(classs);
                                        else
                                   classes.addElement(classs);
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      funcDef = funcDecl();
                             if(funcDefs == null)
                                funcDefs = new ASTFunctionDefinitions(funcDef);
                             else
                                funcDefs.addElement(funcDef);
    }
    t = jj_consume_token(0);
     {if (true) return new ASTProgram(classes, funcDefs, t.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTClass classDef() throws ParseException {
 Token name; ASTInstanceVariableDefs instVars = null;
    jj_consume_token(CLASS);
    name = jj_consume_token(IDENTIFIER);
    jj_consume_token(LEFT_CURLY_BRACE);
    instVars = varDef(instVars);
    jj_consume_token(RIGHT_CURLY_BRACE);
         {if (true) return new ASTClass(name.image, instVars, name.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTInstanceVariableDefs varDef(ASTInstanceVariableDefs instVars) throws ParseException {
 ASTInstanceVariableDef instVar; Token type; Token name; int arrDim = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      type = jj_consume_token(IDENTIFIER);
      name = jj_consume_token(IDENTIFIER);
      arrDim = arrayDim(arrDim);
      jj_consume_token(SEMICOLON);
         instVar = new ASTInstanceVariableDef(type.image, name.image, arrDim, type.beginLine);
         if(instVars != null) instVars.addElement(instVar); else instVars = new ASTInstanceVariableDefs(instVar);
      varDef(instVars);
         {if (true) return instVars;}
      break;
    default:
      jj_la1[2] = jj_gen;
         {if (true) return instVars;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public int arrayDim(int arrDim) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_SQUARE_BRACE:
      jj_consume_token(LEFT_SQUARE_BRACE);
      jj_consume_token(RIGHT_SQUARE_BRACE);
      arrDim = arrayDim(arrDim);
                                                                            {if (true) return arrDim + 1;}
      break;
    default:
      jj_la1[3] = jj_gen;
         {if (true) return arrDim;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTFunctionDefinition funcDecl() throws ParseException {
 Token type; Token name; ASTFormals formals; ASTFunctionDefinition funcDef;
    type = jj_consume_token(IDENTIFIER);
    name = jj_consume_token(IDENTIFIER);
    jj_consume_token(LEFT_PARENTHESIS);
    formals = formParamList();
    jj_consume_token(RIGHT_PARENTHESIS);
    funcDef = funcDeclS(type, name, formals);
                 {if (true) return funcDef;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTFunctionDefinition funcDeclS(Token type, Token name, ASTFormals formals) throws ParseException {
 ASTStatement body;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      funcProto();
                         {if (true) return new ASTPrototype(type.image, name.image, formals, type.beginLine);}
      break;
    case LEFT_CURLY_BRACE:
      body = funcDef();
                          {if (true) return new ASTFunction(type.image, name.image, formals, body, type.beginLine);}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void funcProto() throws ParseException {
    jj_consume_token(SEMICOLON);
  }

  static final public ASTFormals formParamList() throws ParseException {
 ASTFormals formals = null; ASTFormal formal;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      formal = formParam();
                              formals = new ASTFormals(formal);
      formals = formParamListS(formals);
         {if (true) return formals;}
      break;
    default:
      jj_la1[5] = jj_gen;
         {if (true) return formals;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTFormals formParamListS(ASTFormals formals) throws ParseException {
 ASTFormal formal;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      formal = formParam();
                                      formals.addElement(formal);
      formals = formParamListS(formals);
                                                                                                      {if (true) return formals;}
      break;
    default:
      jj_la1[6] = jj_gen;
         {if (true) return formals;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTFormal formParam() throws ParseException {
 Token type; Token name; int arrDim = 0;
    type = jj_consume_token(IDENTIFIER);
    name = jj_consume_token(IDENTIFIER);
    arrDim = arrayDim(arrDim);
         {if (true) return new ASTFormal(type.image, name.image, arrDim, type.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement funcDef() throws ParseException {
 ASTStatements stats = null; ASTStatement stat; Token t;
    t = jj_consume_token(LEFT_CURLY_BRACE);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
      case WHILE:
      case DO:
      case IF:
      case RETURN:
      case SEMICOLON:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      stat = statement();
          if(stats != null) stats.addElement(stat); else stats = new ASTStatements(stat);
    }
    jj_consume_token(RIGHT_CURLY_BRACE);
         if(stats == null) stats = new ASTStatements(); {if (true) return stats;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement statement() throws ParseException {
 ASTStatement stat; Token name;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      name = jj_consume_token(IDENTIFIER);
      stat = statementS(name);
      jj_consume_token(SEMICOLON);
                                                                 {if (true) return stat;}
      break;
    case IF:
      stat = ifStat();
                         {if (true) return stat;}
      break;
    case WHILE:
      stat = whileStat();
                            {if (true) return stat;}
      break;
    case DO:
      stat = doWhile();
                          {if (true) return stat;}
      break;
    case FOR:
      stat = forStat();
                          {if (true) return stat;}
      break;
    case RETURN:
      stat = returnStat();
      jj_consume_token(SEMICOLON);
                                         {if (true) return stat;}
      break;
    case SEMICOLON:
      name = jj_consume_token(SEMICOLON);
                            {if (true) return new ASTEmptyStatement(name.beginLine);}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTReturnStatement returnStat() throws ParseException {
 ASTExpression expr; Token t;
    t = jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case LEFT_PARENTHESIS:
    case MINUS:
    case NOT:
    case IDENTIFIER:
    case INTEGER_LITERAL:
      expr = orExp();
                                      {if (true) return new ASTReturnStatement(expr, expr.line());}
      break;
    default:
      jj_la1[9] = jj_gen;
                                 {if (true) return new ASTReturnStatement(null, t.beginLine);}
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTForStatement forStat() throws ParseException {
 ASTStatement init; ASTExpression test; ASTStatement inc; ASTStatement body; Token start;
    start = jj_consume_token(FOR);
    jj_consume_token(LEFT_PARENTHESIS);
    init = forInit(start);
    jj_consume_token(SEMICOLON);
    test = orExp();
    jj_consume_token(SEMICOLON);
    inc = forInit(start);
    jj_consume_token(RIGHT_PARENTHESIS);
    body = thenStat();
                 {if (true) return new ASTForStatement(init, test, inc, body, start.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement forInit(Token start) throws ParseException {
 Token name; ASTBaseVariable var; ASTStatement stat;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      name = jj_consume_token(IDENTIFIER);
                             var = new ASTBaseVariable(name.image, name.beginLine);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        stat = varDecStat(name);
        break;
      case INC_DOWN:
      case INC_UP:
        stat = incStat(var);
        break;
      case GETS:
        stat = assignStat(var);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                          {if (true) return stat;}
      break;
    default:
      jj_la1[11] = jj_gen;
         {if (true) return new ASTEmptyStatement(start.beginLine);}
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTDoWhileStatement doWhile() throws ParseException {
 ASTExpression test; ASTStatement body; Token start;
    start = jj_consume_token(DO);
    body = thenStat();
    jj_consume_token(WHILE);
    jj_consume_token(LEFT_PARENTHESIS);
    test = orExp();
    jj_consume_token(RIGHT_PARENTHESIS);
    jj_consume_token(SEMICOLON);
         {if (true) return new ASTDoWhileStatement(test, body, start.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTWhileStatement whileStat() throws ParseException {
 ASTExpression test; ASTStatement body; Token start;
    start = jj_consume_token(WHILE);
    jj_consume_token(LEFT_PARENTHESIS);
    test = orExp();
    jj_consume_token(RIGHT_PARENTHESIS);
    body = thenStat();
         {if (true) return new ASTWhileStatement(test, body, start.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement ifStat() throws ParseException {
 Token start; ASTExpression expr; ASTStatement thenState; ASTStatement elseState;
    start = jj_consume_token(IF);
    jj_consume_token(LEFT_PARENTHESIS);
    expr = orExp();
    jj_consume_token(RIGHT_PARENTHESIS);
    thenState = thenStat();
    elseState = elseStat();
                 {if (true) return new ASTIfStatement(expr, thenState, elseState, start.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement thenStat() throws ParseException {
 ASTStatement stat;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_CURLY_BRACE:
      stat = funcDef();
                          {if (true) return stat;}
      break;
    case FOR:
    case WHILE:
    case DO:
    case IF:
    case RETURN:
    case SEMICOLON:
    case IDENTIFIER:
      stat = statement();
                            {if (true) return stat;}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement elseStat() throws ParseException {
 ASTStatement stat;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      stat = thenStat();
                                  {if (true) return stat;}
      break;
    default:
      jj_la1[13] = jj_gen;
         {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement statementS(Token name) throws ParseException {
 ASTStatement stat; ASTVariable var;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_SQUARE_BRACE:
    case DOT:
    case GETS:
    case INC_DOWN:
    case INC_UP:
      var = expressionS(new ASTBaseVariable(name.image, name.beginLine));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GETS:
        stat = assignStat(var);
        break;
      case INC_DOWN:
      case INC_UP:
        stat = incStat(var);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                        {if (true) return stat;}
      break;
    case IDENTIFIER:
      stat = varDecStat(name);
                                 {if (true) return stat;}
      break;
    case LEFT_PARENTHESIS:
      stat = funcCallStat(name);
                                   {if (true) return stat;}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTFunctionCallStatement funcCallStat(Token name) throws ParseException {
 ASTFunctionCallStatement fcStat = new ASTFunctionCallStatement(name.image, name.beginLine);
    jj_consume_token(LEFT_PARENTHESIS);
    fcStat = expListS(fcStat);
    jj_consume_token(RIGHT_PARENTHESIS);
                                                                          {if (true) return fcStat;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTFunctionCallStatement expListS(ASTFunctionCallStatement fcStat) throws ParseException {
 ASTExpression expr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case LEFT_PARENTHESIS:
    case MINUS:
    case NOT:
    case IDENTIFIER:
    case INTEGER_LITERAL:
      expr = orExp();
                        fcStat.addElement(expr);
      fcStat = expListSS(fcStat);
                                                                              {if (true) return fcStat;}
      break;
    default:
      jj_la1[16] = jj_gen;
         {if (true) return fcStat;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTFunctionCallStatement expListSS(ASTFunctionCallStatement fcStat) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      fcStat = expListS(fcStat);
                                           {if (true) return fcStat;}
      break;
    default:
      jj_la1[17] = jj_gen;
         {if (true) return fcStat;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTVariableDefStatement varDecStat(Token type) throws ParseException {
 Token name; int arrDim = 0; ASTExpression expr;
    name = jj_consume_token(IDENTIFIER);
    arrDim = arrayDim(arrDim);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GETS:
      expr = varDecAssign();
                 {if (true) return new ASTVariableDefStatement(type.image, name.image, arrDim, expr, type.beginLine);}
      break;
    default:
      jj_la1[18] = jj_gen;
         {if (true) return new ASTVariableDefStatement(type.image, name.image, arrDim, type.beginLine);}
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression varDecAssign() throws ParseException {
 ASTExpression expr;
    jj_consume_token(GETS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case LEFT_PARENTHESIS:
    case MINUS:
    case NOT:
    case IDENTIFIER:
    case INTEGER_LITERAL:
      expr = orExp();
      break;
    case NEW:
      expr = newExp();
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                   {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTAssignmentStatement assignStat(ASTVariable var) throws ParseException {
 ASTExpression expr;
    jj_consume_token(GETS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case LEFT_PARENTHESIS:
    case MINUS:
    case NOT:
    case IDENTIFIER:
    case INTEGER_LITERAL:
      expr = orExp();
      break;
    case NEW:
      expr = newExp();
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return new ASTAssignmentStatement(var, expr, var.line());}
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement incStat(ASTVariable var) throws ParseException {
 ASTVariableExpression varExp = new ASTVariableExpression(var, var.line());
        ASTIntegerLiteral intLit = new ASTIntegerLiteral(1, var.line()); ASTOperatorExpression opExp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INC_UP:
      jj_consume_token(INC_UP);
                  opExp = new ASTOperatorExpression(varExp, intLit, "+", var.line());
                                {if (true) return new ASTAssignmentStatement(var, opExp, var.line());}
      break;
    case INC_DOWN:
      jj_consume_token(INC_DOWN);
                         opExp = new ASTOperatorExpression(varExp, intLit, "-", var.line());
                                        {if (true) return new ASTAssignmentStatement(var, opExp, var.line());}
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression newExp() throws ParseException {
 Token type; ASTExpression expr;
    jj_consume_token(NEW);
    type = jj_consume_token(IDENTIFIER);
    expr = newExpS(type);
                                                        {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression newExpS(Token type) throws ParseException {
 ASTExpression expr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_PARENTHESIS:
      newClass();
                    {if (true) return new ASTNewClassExpression(type.image, type.beginLine);}
      break;
    case LEFT_SQUARE_BRACE:
      expr = newArray(type);
                               {if (true) return expr;}
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void newClass() throws ParseException {
    jj_consume_token(LEFT_PARENTHESIS);
    jj_consume_token(RIGHT_PARENTHESIS);
  }

  static final public ASTNewArrayExpression newArray(Token type) throws ParseException {
 ASTExpression elems; int arrDim = 1;
    jj_consume_token(LEFT_SQUARE_BRACE);
    elems = orExp();
    jj_consume_token(RIGHT_SQUARE_BRACE);
    arrDim = arrayDim(arrDim);
         {if (true) return new ASTNewArrayExpression(type.image, elems, arrDim, type.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public void newArrayS() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_SQUARE_BRACE:
      jj_consume_token(LEFT_SQUARE_BRACE);
      jj_consume_token(RIGHT_SQUARE_BRACE);
      newArrayS();
      break;
    default:
      jj_la1[23] = jj_gen;

    }
  }

  static final public ASTExpression orExp() throws ParseException {
 ASTExpression expr;
    expr = andExp();
    expr = orExpS(expr);
                                             {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression orExpS(ASTExpression left) throws ParseException {
 ASTExpression right; Token opr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      opr = jj_consume_token(OR);
      right = orExp();
                                    {if (true) return new ASTOperatorExpression(left, right, opr.image, left.line());}
      break;
    default:
      jj_la1[24] = jj_gen;
         {if (true) return left;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression andExp() throws ParseException {
 ASTExpression expr;
    expr = notExp();
    expr = andExpS(expr);
                                              {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression andExpS(ASTExpression left) throws ParseException {
 ASTExpression right; Token opr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      opr = jj_consume_token(AND);
      right = andExp();
                                      {if (true) return new ASTOperatorExpression(left, right, opr.image, left.line());}
      break;
    default:
      jj_la1[25] = jj_gen;
         {if (true) return left;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression notExp() throws ParseException {
 Token t; ASTExpression expr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      t = jj_consume_token(NOT);
      expr = compExp();
                                    {if (true) return new ASTUnaryOperatorExpression(expr, t.image, t.beginLine);}
      break;
    case TRUE:
    case FALSE:
    case LEFT_PARENTHESIS:
    case MINUS:
    case IDENTIFIER:
    case INTEGER_LITERAL:
      expr = compExp();
                          {if (true) return expr;}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression compExp() throws ParseException {
 ASTExpression expr;
    expr = addExp();
    expr = compExpS(expr);
                                               {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression compExpS(ASTExpression left) throws ParseException {
 ASTExpression right; Token opr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
    case NOT_EQUALS:
    case LESS_THAN:
    case GREATER_THAN:
    case LESS_THAN_OR_EQUAL:
    case GREATER_THAN_OR_EQUAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        opr = jj_consume_token(EQUALS);
        break;
      case NOT_EQUALS:
        opr = jj_consume_token(NOT_EQUALS);
        break;
      case GREATER_THAN:
        opr = jj_consume_token(GREATER_THAN);
        break;
      case GREATER_THAN_OR_EQUAL:
        opr = jj_consume_token(GREATER_THAN_OR_EQUAL);
        break;
      case LESS_THAN:
        opr = jj_consume_token(LESS_THAN);
        break;
      case LESS_THAN_OR_EQUAL:
        opr = jj_consume_token(LESS_THAN_OR_EQUAL);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = compExp();
                 {if (true) return new ASTOperatorExpression(left, right, opr.image, left.line());}
      break;
    default:
      jj_la1[28] = jj_gen;
         {if (true) return left;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression addExp() throws ParseException {
 ASTExpression expr;
    expr = multExp();
    expr = addExpS(expr);
                                               {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression addExpS(ASTExpression left) throws ParseException {
 ASTExpression right; Token opr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        opr = jj_consume_token(PLUS);
        break;
      case MINUS:
        opr = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = addExp();
                 {if (true) return new ASTOperatorExpression(left, right, opr.image, left.line());}
      break;
    default:
      jj_la1[30] = jj_gen;
         {if (true) return left;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression multExp() throws ParseException {
 ASTExpression expr;
    expr = unaryMin();
    expr = multExpS(expr);
                                                 {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression multExpS(ASTExpression left) throws ParseException {
 ASTExpression right; Token opr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIMES:
    case DIVIDE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIVIDE:
        opr = jj_consume_token(DIVIDE);
        break;
      case TIMES:
        opr = jj_consume_token(TIMES);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = multExp();
                 {if (true) return new ASTOperatorExpression(left, right, opr.image, left.line());}
      break;
    default:
      jj_la1[32] = jj_gen;
         {if (true) return left;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression unaryMin() throws ParseException {
 ASTExpression expr; ASTIntegerLiteral zero = new ASTIntegerLiteral(0, 0); Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      expr = expression();
                 {if (true) return new ASTOperatorExpression(zero, expr, "-", expr.line());}
      break;
    case TRUE:
    case FALSE:
    case LEFT_PARENTHESIS:
    case IDENTIFIER:
    case INTEGER_LITERAL:
      expr = expression();
                             {if (true) return expr;}
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression expression() throws ParseException {
 ASTExpression expr; ASTVariable var; Token name;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case INTEGER_LITERAL:
      expr = constant();
                           {if (true) return expr;}
      break;
    case IDENTIFIER:
      name = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PARENTHESIS:
        expr = funcCallExp(name);
                                                       {if (true) return expr;}
        break;
      default:
        jj_la1[34] = jj_gen;
        var = expressionS(new ASTBaseVariable(name.image, name.beginLine));
                                                                                            {if (true) return new ASTVariableExpression(var, name.beginLine);}
      }
      break;
    case LEFT_PARENTHESIS:
      jj_consume_token(LEFT_PARENTHESIS);
      expr = orExp();
      jj_consume_token(RIGHT_PARENTHESIS);
                                                               {if (true) return expr;}
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression constant() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                               {if (true) return new ASTIntegerLiteral(Integer.parseInt(t.image), t.beginLine);}
      break;
    case TRUE:
      t = jj_consume_token(TRUE);
                    {if (true) return new ASTBooleanLiteral(true, t.beginLine);}
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
                     {if (true) return new ASTBooleanLiteral(false, t.beginLine);}
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTVariable expressionS(ASTVariable var) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_SQUARE_BRACE:
      var = arrayVar(var);
                             {if (true) return var;}
      break;
    case DOT:
      var = classVar(var);
                             {if (true) return var;}
      break;
    default:
      jj_la1[37] = jj_gen;
         {if (true) return var;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTVariable arrayVar(ASTVariable var) throws ParseException {
 ASTExpression expr;
    jj_consume_token(LEFT_SQUARE_BRACE);
    expr = orExp();
    jj_consume_token(RIGHT_SQUARE_BRACE);
    var = expressionS(new ASTArrayVariable(var, expr, var.line()));
                                                                        {if (true) return var;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTVariable classVar(ASTVariable var) throws ParseException {
 Token name;
    jj_consume_token(DOT);
    name = jj_consume_token(IDENTIFIER);
    var = expressionS(new ASTClassVariable(var, name.image, name.beginLine));
                                                                                  {if (true) return var;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTFunctionCallExpression funcCallExp(Token name) throws ParseException {
 ASTFunctionCallExpression fcExpr = new ASTFunctionCallExpression(name.image, name.beginLine);
    jj_consume_token(LEFT_PARENTHESIS);
    fcExpr = expListE(fcExpr);
    jj_consume_token(RIGHT_PARENTHESIS);
                                                                          {if (true) return fcExpr;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTFunctionCallExpression expListE(ASTFunctionCallExpression fcExpr) throws ParseException {
 ASTExpression expr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case LEFT_PARENTHESIS:
    case MINUS:
    case NOT:
    case IDENTIFIER:
    case INTEGER_LITERAL:
      expr = orExp();
                        fcExpr.addElement(expr);
      fcExpr = expListES(fcExpr);
                                                                              {if (true) return fcExpr;}
      break;
    default:
      jj_la1[38] = jj_gen;
         {if (true) return fcExpr;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTFunctionCallExpression expListES(ASTFunctionCallExpression fcExpr) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      fcExpr = expListE(fcExpr);
                                           {if (true) return fcExpr;}
      break;
    default:
      jj_la1[39] = jj_gen;
         {if (true) return fcExpr;}
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public simplejavaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[40];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1000,0x0,0x0,0x20000,0x10008000,0x0,0x8000000,0x10180380,0x10180380,0x802c00,0x20000000,0x0,0x10188380,0x40,0x20000000,0x24022000,0x802c00,0x8000000,0x20000000,0xa02c00,0xa02c00,0x0,0x22000,0x20000,0x0,0x0,0x802c00,0xc0000000,0xc0000000,0xc00000,0xc00000,0x3000000,0x3000000,0x802c00,0x2000,0x2c00,0xc00,0x4020000,0x802c00,0x8000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x200,0x200,0x0,0x0,0x200,0x0,0x200,0x200,0x700,0x203,0x200,0x200,0x0,0x3,0x203,0x700,0x0,0x0,0x700,0x700,0x3,0x0,0x0,0x80,0x40,0x700,0x3c,0x3c,0x0,0x0,0x0,0x0,0x600,0x0,0x600,0x400,0x0,0x700,0x0,};
   }

  /** Constructor with InputStream. */
  public simplejava(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public simplejava(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new simplejavaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public simplejava(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new simplejavaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public simplejava(simplejavaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(simplejavaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 40; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
